// HTTP methods were copied from net/http.
const (
	MethodGet     = "GET"     // RFC 7231, 4.3.1
	MethodHead    = "HEAD"    // RFC 7231, 4.3.2
	MethodPost    = "POST"    // RFC 7231, 4.3.3
	MethodPut     = "PUT"     // RFC 7231, 4.3.4
	MethodPatch   = "PATCH"   // RFC 5789
	MethodDelete  = "DELETE"  // RFC 7231, 4.3.5
	MethodConnect = "CONNECT" // RFC 7231, 4.3.6
	MethodOptions = "OPTIONS" // RFC 7231, 4.3.7
	MethodTrace   = "TRACE"   // RFC 7231, 4.3.8
	methodUse     = "USE"
)

// Constants represented an error state.
var (
	ErrBadRequest                   = newErrorMessage(StatusBadRequest)
	ErrUnauthorized                 = newErrorMessage(StatusUnauthorized)
	ErrPaymentRequired              = newErrorMessage(StatusPaymentRequired)
	ErrForbidden                    = newErrorMessage(StatusForbidden)
	ErrNotFound                     = newErrorMessage(StatusNotFound)
	ErrMethodNotAllowed             = newErrorMessage(StatusMethodNotAllowed)
	ErrNotAcceptable                = newErrorMessage(StatusNotAcceptable)
	ErrProxyAuthRequired            = newErrorMessage(StatusProxyAuthRequired)
	ErrRequestTimeout               = newErrorMessage(StatusRequestTimeout)
	ErrConflict                     = newErrorMessage(StatusConflict)
	ErrGone                         = newErrorMessage(StatusGone)
	ErrLengthRequired               = newErrorMessage(StatusLengthRequired)
	ErrPreconditionFailed           = newErrorMessage(StatusPreconditionFailed)
	ErrRequestEntityTooLarge        = newErrorMessage(StatusRequestEntityTooLarge)
	ErrRequestURITooLong            = newErrorMessage(StatusRequestURITooLong)
	ErrUnsupportedMediaType         = newErrorMessage(StatusUnsupportedMediaType)
	ErrRequestedRangeNotSatisfiable = newErrorMessage(StatusRequestedRangeNotSatisfiable)
	ErrExpectationFailed            = newErrorMessage(StatusExpectationFailed)
	ErrTeapot                       = newErrorMessage(StatusTeapot)
	ErrMisdirectedRequest           = newErrorMessage(StatusMisdirectedRequest)
	ErrUnprocessableEntity          = newErrorMessage(StatusUnprocessableEntity)
	ErrLocked                       = newErrorMessage(StatusLocked)
	ErrFailedDependency             = newErrorMessage(StatusFailedDependency)
	ErrTooEarly                     = newErrorMessage(StatusTooEarly)
	ErrUpgradeRequired              = newErrorMessage(StatusUpgradeRequired)
	ErrPreconditionRequired         = newErrorMessage(StatusPreconditionRequired)
	ErrTooManyRequests              = newErrorMessage(StatusTooManyRequests)
	ErrRequestHeaderFieldsTooLarge  = newErrorMessage(StatusRequestHeaderFieldsTooLarge)
	ErrUnavailableForLegalReasons   = newErrorMessage(StatusUnavailableForLegalReasons)

	ErrInternalServerError           = newErrorMessage(StatusInternalServerError)
	ErrNotImplemented                = newErrorMessage(StatusNotImplemented)
	ErrBadGateway                    = newErrorMessage(StatusBadGateway)
	ErrServiceUnavailable            = newErrorMessage(StatusServiceUnavailable)
	ErrGatewayTimeout                = newErrorMessage(StatusGatewayTimeout)
	ErrHTTPVersionNotSupported       = newErrorMessage(StatusHTTPVersionNotSupported)
	ErrVariantAlsoNegotiates         = newErrorMessage(StatusVariantAlsoNegotiates)
	ErrInsufficientStorage           = newErrorMessage(StatusInsufficientStorage)
	ErrLoopDetected                  = newErrorMessage(StatusLoopDetected)
	ErrNotExtended                   = newErrorMessage(StatusNotExtended)
	ErrNetworkAuthenticationRequired = newErrorMessage(StatusNetworkAuthenticationRequired)
)

var errorsAliases = map[int]*errorMessage{
	StatusBadRequest:                    ErrBadRequest,
	StatusUnauthorized:                  ErrUnauthorized,
	StatusPaymentRequired:               ErrPaymentRequired,
	StatusForbidden:                     ErrForbidden,
	StatusNotFound:                      ErrNotFound,
	StatusMethodNotAllowed:              ErrMethodNotAllowed,
	StatusNotAcceptable:                 ErrNotAcceptable,
	StatusProxyAuthRequired:             ErrProxyAuthRequired,
	StatusRequestTimeout:                ErrRequestTimeout,
	StatusConflict:                      ErrConflict,
	StatusGone:                          ErrGone,
	StatusLengthRequired:                ErrLengthRequired,
	StatusPreconditionFailed:            ErrPreconditionFailed,
	StatusRequestEntityTooLarge:         ErrRequestEntityTooLarge,
	StatusRequestURITooLong:             ErrRequestURITooLong,
	StatusUnsupportedMediaType:          ErrUnsupportedMediaType,
	StatusRequestedRangeNotSatisfiable:  ErrRequestedRangeNotSatisfiable,
	StatusExpectationFailed:             ErrExpectationFailed,
	StatusTeapot:                        ErrTeapot,
	StatusMisdirectedRequest:            ErrMisdirectedRequest,
	StatusUnprocessableEntity:           ErrUnprocessableEntity,
	StatusLocked:                        ErrLocked,
	StatusFailedDependency:              ErrFailedDependency,
	StatusTooEarly:                      ErrTooEarly,
	StatusUpgradeRequired:               ErrUpgradeRequired,
	StatusPreconditionRequired:          ErrPreconditionRequired,
	StatusTooManyRequests:               ErrTooManyRequests,
	StatusRequestHeaderFieldsTooLarge:   ErrRequestHeaderFieldsTooLarge,
	StatusUnavailableForLegalReasons:    ErrUnavailableForLegalReasons,
	StatusInternalServerError:           ErrInternalServerError,
	StatusNotImplemented:                ErrNotImplemented,
	StatusBadGateway:                    ErrBadGateway,
	StatusServiceUnavailable:            ErrServiceUnavailable,
	StatusGatewayTimeout:                ErrGatewayTimeout,
	StatusHTTPVersionNotSupported:       ErrHTTPVersionNotSupported,
	StatusVariantAlsoNegotiates:         ErrVariantAlsoNegotiates,
	StatusInsufficientStorage:           ErrInsufficientStorage,
	StatusLoopDetected:                  ErrLoopDetected,
	StatusNotExtended:                   ErrNotExtended,
	StatusNetworkAuthenticationRequired: ErrNetworkAuthenticationRequired,
}

=================================================================================
package resp

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
)

type Response struct {
	httpWriter  http.ResponseWriter
	httpHeaders map[string][]string
	httpCookies []*http.Cookie
	statusCode  int
}

func NewResponse(w http.ResponseWriter, opts ...Option) *Response {
	response := &Response{
		httpWriter:  w,
		httpHeaders: make(map[string][]string),
		httpCookies: make([]*http.Cookie, 0),
		statusCode:  StatusUndefined,
	}

	for _, opt := range opts {
		response = opt(response)
	}

	return response
}

func (r *Response) prepare(defStatus int, defContentType string) error {
	if r.httpWriter == nil {
		return errors.New("http.ResponseWriter is nil")
	}

	for key, values := range r.httpHeaders {
		for _, value := range values {
			r.httpWriter.Header().Add(key, value)
		}
	}

	for _, cookie := range r.httpCookies {
		http.SetCookie(r.httpWriter, cookie)
	}

	if _, ok := r.httpWriter.Header()[HeaderContentType]; !ok {
		r.httpWriter.Header().Set(HeaderContentType, defContentType)
	}

	if r.statusCode == StatusUndefined {
		r.statusCode = defStatus
	}

	return nil
}

func (r *Response) SetStatus(code int) *Response {
	r.statusCode = code
	return r
}

func (r *Response) SetHeader(key string, value ...string) *Response {
	r.httpHeaders[key] = make([]string, 0, len(value))
	r.httpHeaders[key] = append(r.httpHeaders[key], value...)

	return r
}

func (r *Response) AddHeader(key string, value ...string) *Response {
	if _, ok := r.httpHeaders[key]; !ok {
		r.httpHeaders[key] = make([]string, 0, len(value))
	}
	r.httpHeaders[key] = append(r.httpHeaders[key], value...)

	return r
}

func (r *Response) DelHeader(key string) *Response {
	delete(r.httpHeaders, key)
	return r
}

func (r *Response) ClearHeaders() *Response {
	r.httpHeaders = make(map[string][]string)
	return r
}

func (r *Response) SetCookie(cookie *http.Cookie) *Response {
	r.httpCookies = make([]*http.Cookie, 0, 1)
	r.httpCookies = append(r.httpCookies, cookie)
	return r
}

func (r *Response) AddCookie(cookie *http.Cookie) *Response {
	if r.httpCookies == nil || len(r.httpCookies) == 0 {
		r.httpCookies = make([]*http.Cookie, 0, 1)
		r.httpCookies = append(r.httpCookies, cookie)
		return r
	}

	for i, cs := range r.httpCookies {
		if cs.Name == cookie.Name {
			r.httpCookies = append(r.httpCookies[:i], r.httpCookies[i+1:]...)
			r.httpCookies = append(r.httpCookies, cookie)
			return r
		}
	}

	r.httpCookies = append(r.httpCookies, cookie)
	return r
}

func (r *Response) DelCookie(name string) *Response {
	for i, c := range r.httpCookies {
		if c.Name == name {
			r.httpCookies = append(r.httpCookies[:i], r.httpCookies[i+1:]...)
			break
		}
	}

	return r
}

func (r *Response) ClearCookies() *Response {
	r.httpCookies = make([]*http.Cookie, 0)
	return r
}

func (r *Response) JSON(data any) error {
	if err := r.prepare(StatusOK, MIMEApplicationJSON); err != nil {
		return err
	}

	r.httpWriter.WriteHeader(r.statusCode)
	return json.NewEncoder(r.httpWriter).Encode(data)
}

func (r *Response) JSONP(data any, callback string) error {
	resp, err := json.Marshal(data)
	if err != nil {
		return err
	}

	if err := r.prepare(StatusOK, MIMEApplicationJavaScript); err != nil {
		return err
	}

	r.httpWriter.WriteHeader(r.statusCode)
	_, err = r.httpWriter.Write([]byte(callback + "(" + string(resp) + ");"))
	return err
}

func (r *Response) String(data string) error {
	if err := r.prepare(StatusOK, MIMETextPlain); err != nil {
		return err
	}

	r.httpWriter.WriteHeader(r.statusCode)
	_, err := r.httpWriter.Write([]byte(data))
	return err
}

func (r *Response) Error(message ...string) error {
	if r.statusCode == StatusUndefined {
		r.statusCode = StatusInternalServerError
	}

	return r.JSON(newErrorMessage(r.statusCode, message...))
}

func (r *Response) Stream(data io.Reader) error {
	if err := r.prepare(StatusOK, MIMEOctetStream); err != nil {
		return err
	}

	r.httpWriter.WriteHeader(r.statusCode)
	_, err := io.Copy(r.httpWriter, data)
	return err
}

func (r *Response) ServeFile(req *http.Request, file string) error {
	if err := r.prepare(StatusOK, MIMEOctetStream); err != nil {
		return err
	}

	r.httpWriter.WriteHeader(r.statusCode)
	http.ServeFile(r.httpWriter, req, file)
	return nil
}

func (r *Response) ServeFileAsDownload(fileName string, data []byte) error {
	if err := r.prepare(StatusOK, MIMEOctetStream); err != nil {
		return err
	}

	r.httpWriter.Header().Set(
		HeaderContentDisposition,
		"attachment; filename=\""+fileName+"\"",
	)

	r.httpWriter.WriteHeader(r.statusCode)
	_, err := r.httpWriter.Write(data)
	return err
}
